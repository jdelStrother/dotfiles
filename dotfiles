#!/usr/bin/env ruby
require 'thor'

class DotFiles < Thor
  desc "install", "install the dot files into user's home directory"
  def install
    create_tmp_dirs

    replace_all = false
    Dir.chdir File.dirname(__FILE__)

    files = Dir["*"] - [File.basename(__FILE__), '.git']
    files.each do |file|
      destination = File.join(ENV['HOME'], ".#{file}")
      system %Q{mkdir -p "#{destination}"} if file =~ /\//

      if File.exist?(destination)
        if File.identical? file, destination
          puts "identical #{destination}"
        elsif replace_all
          replace_file(file)
        else
          print "overwrite #{destination}? [ynaq] "
          case $stdin.gets.chomp
          when 'a'
            replace_all = true
            replace_file(file)
          when 'y'
            replace_file(file)
          when 'q'
            exit
          else
            puts "skipping #{destination}"
          end
        end
      else
        puts "Destination #{destination} doesn't exist"
        link_file(file)
      end
    end
  end

  desc "add FILE", "moves FILE from the user's home directory to dotfiles, then symlinks it back"
  def add(file)
    raise "#{file} isn't a dotfile" unless file=~/^\./

    source = File.join(ENV['HOME'], file)
    destination = File.join(File.dirname(__FILE__), file.sub(/^\./, ''))
    raise "Couldn't find #{source}" unless File.exist?(source)
    raise "#{destination} already exists" if File.exist?(destination)

    system %Q{mv "#{source}" "#{destination}"}
    link_file(File.basename(destination))
  end

  protected
  def replace_file(file)
    system %Q{rm -rf "$HOME/.#{file}"}
    link_file(file)
  end

  def link_file(file)
    puts "linking ~/.#{file}"
    # system %Q{rm "$HOME/.#{file}"}
    system %Q{ln -s "$PWD/#{file}" "$HOME/.#{file}"}
  end
  
  def create_tmp_dirs
    # wish vim created these for you...
    %w{backup swap undo}.each do |f|
      `mkdir -p $HOME/.tmp/vim/#{f}`
    end
  end
end

DotFiles.start
