#!/usr/bin/env ruby
require "open3"
require "date"
require "pathname"

today = Date.today
days_ago =
  if ARGV[0]
    ARGV[0].to_i
  elsif today.cwday == 1 # Today is Monday, go back to Friday
    3
  else
    1
  end
previous_day = (today - days_ago)
puts "Since #{previous_day}"

# Common directories always get checked even if they're not in the recent history, just in case we edited them via emacs or something
COMMON_DIRECTORIES = %w[/Users/jon/Developer/web /Users/jon/Developer/terraform /Users/jon/Developer/imgn /Users/jon/Developer/jenkins-docker /Users/jon/Developer/ansible]
dirs=[]
File.foreach(File.expand_path("~/.local/share/z/data")) do |line|
  name, _score, time = line.split("|")
  time = Time.at(time.to_i)
  if time > previous_day.to_time
    dirs << name
  end
end
dirs = dirs.sort.uniq


def git_history_ignoring_rebases(previous_day, dir)
  Dir.chdir(dir) do
    # I do a lot of rebasing which probably isn't interesting to report for standup.
    # This alters the commit-date, so `git log --since={yesterday}` doesn't work.
    # Rebasing keeps the original author-date, though. Take a first pass to find commits where the author-date is
    # after yesterday's date, and then print out those commits with `git log --no-walk`
    datetime = previous_day.strftime("%Y-%m-%dT00:00:00")
    commits = Open3.capture2("git", "log", "--all", "--pretty=%aI %H", "--since={#{datetime}}")[0]
    recent_commits = commits.each_line.filter_map do |l|
      author_date, commit = l.chomp.split(" ")
      commit if author_date >= datetime
    end
    return if recent_commits.empty?

    Open3.capture2(
      "git", "log", "--author=Jon", "--no-walk", "--color", "--date=relative",
      "--pretty=format:%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%aN, %cd)%Creset",
      *recent_commits
    )[0].strip
  end
end

def git_history(previous_day, dir)
  Dir.chdir(dir) do
    datetime = previous_day.strftime("%Y-%m-%dT00:00:00")
    return Open3.capture2("git", "lg", "--author=Jon", "--since={#{datetime}}", "--branches", "--remotes")[0].strip
  end
end

dirs_with_git_history = {}
(COMMON_DIRECTORIES + dirs).uniq.each do |dir|
  next unless File.exist?("#{dir}/.git")
  work = git_history_ignoring_rebases(previous_day, dir)
  if work && !work.empty?
    dirs_with_git_history[dir] = work
  end
end

dirs_with_git_history.each do |dir, work|
  puts "==== #{dir} =====\n#{work}\n\n"
end
# ignore subdirectories of the git directories we've already reported
project_paths = dirs_with_git_history.keys.map { |d| File.join(d, "**") }
other_visited_dirs = (dirs - dirs_with_git_history.keys).select { |dir| project_paths.any? { |pp| !Pathname.new(dir).fnmatch?(pp) } }
unless other_visited_dirs.empty?
  puts "==== Other visited directories: ====="
  puts other_visited_dirs
end
